import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, tap, catchError, throwError } from 'rxjs';
import { Router } from '@angular/router';

const BASE_URL = "http://localhost:8081/api/";

@Injectable({
  providedIn: 'root'
})
export class RoleService {
  constructor(private http: HttpClient, private router: Router) {}

  createRole(role: any): Observable<any> {
    return this.http.post(`${BASE_URL}roles`, role, { withCredentials: true }).pipe(
      tap(response => console.log("‚úÖ R√¥le ajout√© :", response)),
      catchError(err => {
        console.error("‚ùå Erreur lors de l'ajout du r√¥le", err);
        return throwError(() => new Error("Ajout du r√¥le √©chou√©."));
      })
    );
  }
  getAllPermissions(): Observable<any> {
    return this.http.get(`${BASE_URL}permissions`, { withCredentials: true }).pipe(
      tap(response => console.log("‚úÖ Permissions r√©cup√©r√©es :", response)),
      catchError(err => {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des permissions", err);
        return throwError(() => new Error("Impossible de r√©cup√©rer les permissions."));
      })
    );
  }

  // ‚úÖüîπ R√©cup√©rer tous les r√¥les
  getAllRoles(): Observable<any> {
    return this.http.get(`${BASE_URL}roles`, { withCredentials: true }).pipe(
      tap(response => console.log("‚úÖ R√¥les r√©cup√©r√©s :", response)),
      catchError(err => {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des r√¥les", err);
        return throwError(() => new Error("Impossible de r√©cup√©rer les r√¥les."));
      })
    );
  }

  // ‚úÖüîπ R√©cup√©rer un r√¥le par ID
  getRoleById(id: number): Observable<any> {
    return this.http.get(`${BASE_URL}roles/${id}`, { withCredentials: true }).pipe(
      tap(response => console.log(`‚úÖ R√¥le ID ${id} r√©cup√©r√© :`, response)),
      catchError(err => {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration du r√¥le ID ${id}`, err);
        return throwError(() => new Error("Impossible de r√©cup√©rer ce r√¥le."));
      })
    );
  }

  // ‚úÖüîπ Modifier un r√¥le
  updateRole(id: number, role: any): Observable<any> {
    return this.http.put(`${BASE_URL}roles/${id}`, role, { withCredentials: true }).pipe(
      tap(response => console.log(`‚úÖ R√¥le ID ${id} mis √† jour :`, response)),
      catchError(err => {
        console.error(`‚ùå Erreur lors de la mise √† jour du r√¥le ID ${id}`, err);
        let errorMessage = "Modification du r√¥le √©chou√©e.";
        if (err.error && typeof err.error === 'string') {
          errorMessage = err.error;
        } else if (err.error && err.error.message) {
          errorMessage = err.error.message;
        }
        return throwError(() => new Error(errorMessage));
      })
    );
  }

  // ‚úÖüîπ Supprimer un r√¥le
  deleteRole(id: number): Observable<string> { // Expecting a string response
    return this.http.delete(`${BASE_URL}roles/${id}`, { withCredentials: true, responseType: 'text' }).pipe(
      tap((response: string) => console.log(`‚úÖ R√¥le ID ${id} supprim√©: ${response}`)),
      catchError(err => {
        console.error(`‚ùå Erreur lors de la suppression du r√¥le ID ${id}`, err);
        let errorMessage = "Suppression du r√¥le √©chou√©e.";
        if (err.error && typeof err.error === 'string') {
          errorMessage = err.error; // Capture backend error message if it's a string
        } else if (err.error && err.error.message) {
          errorMessage = err.error.message;
        }
        return throwError(() => new Error(errorMessage));
      })
    );
  }
}
